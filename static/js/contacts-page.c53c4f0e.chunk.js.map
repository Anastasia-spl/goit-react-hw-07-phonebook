{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx","components/Container/Container.jsx","components/Container/Container.module.scss","components/Section/Section.jsx"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","checkDuplicateContacts","newContact","existedContacts","props","isDuplicateNumber","find","isDuplicateName","toLowerCase","alert","handleSubmit","preventDefault","addContact","reset","this","className","styles","Form","onSubmit","label","type","input","pattern","title","required","onChange","Component","connect","contactsSelectors","getContacts","dispatch","data","contactsOperations","useStyles","createUseStyles","contactItem","marginBottom","deleteBtn","marginLeft","contacts","filter","getFilter","filteredContacts","getFilteredContacts","isLoading","getLoader","onDeleteContact","id","deleteContact","Loader","color","height","width","map","onClick","onFilterChange","event","contactsActions","filterContact","Contacts","fetchContacts","Container","Section","children"],"mappings":"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","file":"static/js/contacts-page.c53c4f0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__pmdyI\",\"input\":\"ContactForm_input__3emgF\",\"label\":\"ContactForm_label__3KgVy\"};","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport styles from './ContactForm.module.scss';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  checkDuplicateContacts = newContact => {\n    const { existedContacts } = this.props;\n    const isDuplicateNumber = existedContacts.find(\n      ({ number }) => number === newContact.number,\n    );\n    const isDuplicateName = existedContacts.find(\n      ({ name }) => name.toLowerCase() === newContact.name.toLowerCase(),\n    );\n\n    if (isDuplicateNumber) {\n      alert('This number is already in contacts.');\n      return true;\n    }\n\n    if (isDuplicateName) {\n      alert(`${isDuplicateName.name} is already in contacts.`);\n      return true;\n    }\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.checkDuplicateContacts(this.state)) {\n      return;\n    }\n    this.props.addContact(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className={styles.Form} onSubmit={this.handleSubmit}>\n        <label>\n          <span className={styles.label}>Name</span>\n          <input\n            type=\"text\"\n            className={styles.input}\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          <span className={styles.label}>Number</span>\n          <input\n            type=\"tel\"\n            className={styles.input}\n            name=\"number\"\n            value={number}\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  existedContacts: contactsSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: data => dispatch(contactsOperations.addContact(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { createUseStyles } from 'react-jss';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport Loader from '../Loader';\n\nconst useStyles = createUseStyles({\n  contactItem: {\n    marginBottom: 15,\n  },\n  deleteBtn: {\n    marginLeft: 25,\n  },\n});\n\nconst ContactList = ({ filteredContacts, onDeleteContact, isLoading }) => {\n  const { contactItem, deleteBtn } = useStyles();\n\n  return (\n    <>\n      {isLoading && (\n        <Loader type=\"Circles\" color=\"#00BFFF\" height={80} width={80} />\n      )}\n      <ul>\n        {filteredContacts.map(({ name, number, id }) => (\n          <li key={id} className={contactItem}>\n            <span>\n              {name}: {number}\n            </span>\n            <button\n              type=\"button\"\n              className={deleteBtn}\n              onClick={() => onDeleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n  filter: contactsSelectors.getFilter(state),\n  filteredContacts: contactsSelectors.getFilteredContacts(state),\n  isLoading: contactsSelectors.getLoader(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { connect } from 'react-redux';\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\n\nconst Filter = ({ value, onFilterChange }) => {\n  return (\n    <div className=\"filter-wrapper\">\n      <h3>Find contacts by name:</h3>\n      <input type=\"text\" value={value} onChange={onFilterChange} />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFilterChange: event =>\n    dispatch(contactsActions.filterContact(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Section from '../components/Section';\nimport Container from '../components/Container';\nimport ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactsList';\nimport Filter from '../components/Filter';\nimport { contactsOperations } from '../redux/contacts';\n\nclass Contacts extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <Container>\n          <h1>Phonebook</h1>\n        </Container>\n        <Section title=\"Add contact:\">\n          <ContactForm />\n        </Section>\n        <Section>\n          <Filter />\n        </Section>\n        <Section title=\"Contacts\">\n          <ContactList />\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(null, mapDispatchToProps)(Contacts);\n","import styles from './Container.module.scss';\nconst Container = ({ children }) => (\n  <div className={styles.Container}>{children}</div>\n);\nexport default Container;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__11SY1\"};","import Container from '../Container';\n\nconst Section = ({ title, children }) => (\n  <section className=\"Section\">\n    <Container>\n      <h2 className=\"title\">{title}</h2>\n      {children}\n    </Container>\n  </section>\n);\n\nexport default Section;\n"],"sourceRoot":""}